<#
// Copyright (c) Samuel Cragg.
//
// Licensed under the MIT license. See LICENSE file in the project root for
// full license information.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
Type[] PrimitiveTypes =
{
    typeof(bool),
    typeof(byte),
    typeof(char),
    typeof(decimal),
    typeof(double),
    typeof(float),
    typeof(int),
    typeof(long),
    typeof(sbyte),
    typeof(short),
    typeof(string),
    typeof(uint),
    typeof(ulong),
    typeof(ushort),
    typeof(DateTime),
    typeof(Guid),
    typeof(TimeSpan),
    typeof(Uri),
};
#>
// <auto-generated/>
//
// This file is generated from PrimitiveDelegates.tt - modify the template to
// make changes here.

namespace Crest.Host.Serialization
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Crest.Host.Serialization.Internal;

    internal partial class DeserializeDelegateGenerator
    {
        private static readonly int[] MetadataIndexes = new int[<#= PrimitiveTypes.Length #>];

        private static void AddPrimitiveDelegates(IDictionary<Type, DeserializeInstance> dictionary, Func<MemberInfo, int> getMetadataIndex)
        {
<#
    for (int i = 0; i < PrimitiveTypes.Length; i++)
    {
        string name = PrimitiveTypes[i].Name;
        WriteLine("            MetadataIndexes[" + i + "] = getMetadataIndex(typeof(" + name + "));");
        WriteLine("            dictionary.Add(typeof(" + name+ "), ReadPrimitive" + name + ");");
        if (PrimitiveTypes[i].IsValueType)
        {
            WriteLine("            dictionary.Add(typeof(" + name+ "?), ReadPrimitiveNullable" + name + ");");
        }
    }
#>
        }
<#
for (int i = 0; i < PrimitiveTypes.Length; i++)
{
        string name = PrimitiveTypes[i].Name;
        if (PrimitiveTypes[i].IsValueType)
        {
#>

        private static object ReadPrimitive<#= name #>(IFormatter formatter, IReadOnlyList<object> metadata)
        {
            formatter.ReadBeginPrimitive(metadata[MetadataIndexes[<#= i #>]]);
            object instance = formatter.Reader.Read<#= name #>();
            formatter.ReadEndPrimitive();
            return instance;
        }

        private static object ReadPrimitiveNullable<#= name #>(IFormatter formatter, IReadOnlyList<object> metadata)
        {
            object instance = null;
            if (!formatter.Reader.ReadNull())
            {
                formatter.ReadBeginPrimitive(metadata[MetadataIndexes[<#= i #>]]);
                instance = (object)formatter.Reader.Read<#= name #>();
                formatter.ReadEndPrimitive();
            }

            return instance;
        }
<#
        }
        else
        {
#>

        private static object ReadPrimitive<#= name #>(IFormatter formatter, IReadOnlyList<object> metadata)
        {
            object instance = null;
            if (!formatter.Reader.ReadNull())
            {
                formatter.ReadBeginPrimitive(metadata[MetadataIndexes[<#= i #>]]);
                instance = (object)formatter.Reader.Read<#= name #>();
                formatter.ReadEndPrimitive();
            }

            return instance;
        }
<#
        }
}
#>
    }

    internal partial class SerializeDelegateGenerator
    {
        private static readonly int[] MetadataIndexes = new int[<#= PrimitiveTypes.Length #>];

        private static void AddPrimitiveDelegates(IDictionary<Type, SerializeInstance> dictionary, Func<MemberInfo, int> getMetadataIndex)
        {
<#
    for (int i = 0; i < PrimitiveTypes.Length; i++)
    {
        string name = PrimitiveTypes[i].Name;
        WriteLine("            MetadataIndexes[" + i + "] = getMetadataIndex(typeof(" + name + "));");
        WriteLine("            dictionary.Add(typeof(" + name+ "), WritePrimitive" + name + ");");
        if (PrimitiveTypes[i].IsValueType)
        {
            WriteLine("            dictionary.Add(typeof(" + name+ "?), WritePrimitive" + name + ");");
        }
    }
#>
        }
<#
for (int i = 0; i < PrimitiveTypes.Length; i++)
{
        string name = PrimitiveTypes[i].Name;
#>

        private static void WritePrimitive<#= name #>(IFormatter formatter, IReadOnlyList<object> metadata, object instance)
        {
            formatter.WriteBeginPrimitive(metadata[MetadataIndexes[<#= i #>]]);
            formatter.Writer.Write<#= name #>((<#= name #>)instance);
            formatter.WriteEndPrimitive();
        }
<#
}
#>
    }
}
